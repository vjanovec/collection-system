{"version":3,"sources":["App.js","Components/CustomerOrder/CustomerOrder.js","Components/CustomerPage/CustomerPage.js","Components/BranchButton/BranchButton.js","Components/BranchOrder/BranchOrder.js","Components/BranchForm/BranchForm.js","Components/BranchPage/BranchPage.js","serviceWorker.js","index.js"],"names":["Component","BranchOrder","props","state","Container","className","this","orderData","isOrderReady","class","orderDigit","React","CustomerPage","orders","endpoint","alert","socket","socketIOClient","setState","on","data","console","log","map","order","Col","sm","md","lg","Row","Button","color","onClick","click","children","elapsedTime","since","Date","getMinutes","elapsed","getTime","diff","minutes","Math","floor","seconds","message","replace","updateHandler","deleteHandler","orderCustomerName","style","padding","BranchForm","numberChangeHandler","event","digit","parseInt","target","value","nameChangeHandler","autogenerateHandler","fetch","then","response","json","resData","lastOrderDigit","bind","addHandler","id","type","onChange","autoFocus","Alert","variant","isAlertPositive","alertContent","Menu","method","res","content","isPositive","catch","err","name","isReady","body","JSON","stringify","headers","Boolean","window","location","hostname","match","routing","exact","path","component","BranchPage","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.17df5b7d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      orders: null,\n      endpoint: \"http://localhost:8000\"\n    };\n  }\n\n  componentDidMount() {\n    const { endpoint } = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"order\", data => {\n      let orders = null;\n      if(!this.state.orders) {\n        orders = [];\n      } else {\n        orders = [...this.state.orders];\n      }\n      orders.push(data);\n      this.setState({\n        orders: orders,\n      });\n  })\n}\n  onChangeHandler = event => {\n    console.log(event.target.value)\n    this.setState({\n      currentOrder: event.target.value\n    });\n  }\n  submitHandler = () => {\n    fetch(this.state.endpoint+'/order', {\n      method: 'POST',\n      body: JSON.stringify({\n        order: this.state.currentOrder\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      } \n    }).then(res => res.json())\n    .then(resData => console.log(resData)).catch(err => console.log(err));\n  } \n\n  render() {\n    let orders = null;\n    if(this.state.orders) {\n      orders = this.state.orders.map(order => {\n        return <li>{order}</li>;\n      })\n    }\n    \n    return (\n        <div style={{ textAlign: \"center\" }}>\n          {this.state.orders ? <ul>{orders}</ul> : null}\n          \n          <label>insert message</label><input type='number' onChange={this.onChangeHandler}></input>\n          <button onClick={this.submitHandler} type='submit'>send</button>\n          \n        </div>\n        \n          \n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\nimport './order.css';\r\n\r\n// BOOTSTRAP IMPORTS\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nexport default class BranchOrder extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            ...props,\r\n        }\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        return { ...props };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container className={'branch-order noselect ' + (this.state.orderData.isOrderReady ? 'bg-success' : 'bg-light')}>\r\n                <p class='digit'>{this.state.orderData.orderDigit}</p>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport CustomerOrder from '../CustomerOrder/CustomerOrder';\r\n\r\nimport '../BranchPage/menu.css';\r\n// BOOTSTRAP IMPORTS\r\nimport Row from 'react-bootstrap/Row';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\n\r\nexport default class CustomerPage extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            orders: [],\r\n            endpoint: \"http://localhost:8000\",\r\n            alert: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { endpoint } = this.state;\r\n        const socket = socketIOClient(endpoint);\r\n        this.setState({\r\n            socket: socket,\r\n        })\r\n        socket.on('orders', data => {\r\n            console.log(data);\r\n            this.setState({orders: data});\r\n        });\r\n    }\r\n\r\nrender() {\r\n    let orders = null;\r\n    if(this.state.orders) {\r\n        orders = this.state.orders.map(order => {\r\n            return <Col sm={6} md={4} lg={3}><CustomerOrder orderData={order}></CustomerOrder></Col>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='wrapper'>\r\n            <Container className='container-order'>\r\n                <Row className='row-order'>\r\n                    {orders}\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n}\r\n","import React from 'react';\r\nimport './Button.css';\r\n\r\nexport default class Button extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n        <div className={this.props.color+' branch-button text-white'} onClick={this.props.click}>{this.props.children}</div>\r\n        )\r\n    }\r\n} ","import React from \"react\";\r\nimport './order.css';\r\nimport Button from '../BranchButton/BranchButton';\r\n\r\n\r\n// BOOTSTRAP IMPORTS\r\nimport Row from 'react-bootstrap/Row';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\nexport default class BranchOrder extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.state = {\r\n            ...props,\r\n            \r\n        }\r\n\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        return { ...props };\r\n    }\r\n\r\n    elapsedTime = () => {\r\n        const since = (new Date().getMinutes - 10), // Saturday, 08-Apr-17 21:00:00 UTC\r\n            elapsed = (new Date().getTime() - since) / 1000;\r\n\r\n        if (elapsed >= 0) {\r\n            const diff = {};\r\n\r\n            diff.minutes = Math.floor(elapsed / 60 % 60);\r\n            diff.seconds = Math.floor(elapsed % 60);\r\n\r\n            let message = `${diff.minutes}:${diff.seconds}`;\r\n            message = message.replace(/(?:0. )+/, '');\r\n            alert(message);\r\n        }\r\n        else {\r\n            alert('Elapsed time lesser than 0, i.e. specified datetime is still in the future.');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var { updateHandler, deleteHandler} = this.props\r\n        return (\r\n            <Container className={'branch-order noselect ' + (this.state.orderData.isOrderReady ? 'bg-success' : 'bg-light')}>\r\n                <p class='digit'>{this.state.orderData.orderDigit}</p>\r\n                <p class='name'>{this.state.orderData.orderCustomerName}</p>\r\n                <p class='timer'>{}</p>\r\n                <Row>\r\n                    {this.state.orderData.isOrderReady ? null : <Col style={{ padding: 0 }}><Button color='bg-success' click={() => updateHandler(this.state.orderData.orderDigit)}><i className=\"fas fa-check icon\"></i></Button></Col>}\r\n                    <Col style={{ padding: 0 }}><Button color={this.state.orderData.isOrderReady ? 'bg-dark' : 'bg-danger'} click={() => deleteHandler(this.state.orderData.orderDigit)}><i className=\" fas fa-trash icon\"></i></Button></Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './input.css';\r\nimport Button from '../BranchButton/BranchButton';\r\n\r\n// BOOTSTRAP IMPORTS\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\nexport default class BranchForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            ...props,\r\n        };\r\n        this.setState({\r\n            orderDigit: 1,\r\n        })\r\n\r\n        this.numberChangeHandler = this.numberChangeHandler.bind(this);\r\n        this.nameChangeHandler = this.nameChangeHandler.bind(this);\r\n        this.autogenerateHandler = this.autogenerateHandler.bind(this);\r\n\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        return { ...props };\r\n    }\r\n\r\n\r\n    numberChangeHandler = (event) => {\r\n        const digit = parseInt(event.target.value);\r\n        this.setState({\r\n            orderDigit: digit\r\n        })\r\n    }\r\n\r\n    nameChangeHandler = (event) => {\r\n        this.setState({\r\n            orderCustomerName: event.target.value\r\n        })\r\n    }\r\n    autogenerateHandler = () => {\r\n        fetch(this.state.endpoint + '/last-order')\r\n            .then(response => response.json())\r\n            .then(resData => {\r\n                this.setState({ orderDigit: resData.lastOrderDigit + 1 });\r\n            });\r\n    }\r\n\r\n\r\n    render() {\r\n        var { addHandler, updateHandler, deleteHandler } = this.props;\r\n        return (\r\n            <div className='bg-light branch-form noselect'>\r\n                <p className='label'>Zadejte pořadové číslo</p>\r\n                <input id='number-input' type='number' className='number-input' value={this.state.orderDigit} onChange={this.numberChangeHandler} autoFocus></input>\r\n                <button className='autogen-btn bg-primary' onClick={this.autogenerateHandler}>AUTO GENERATE</button>\r\n                <p className='label'>Zadejte jméno, číslo objednávky nebo identifikační klíč</p>\r\n                <input id='number-input' type='text' className='name-input' onChange={this.nameChangeHandler}></input>\r\n                {this.state.alert ? <Alert variant={this.state.alert.isAlertPositive ? 'success' : 'danger'}>{this.state.alert.alertContent}</Alert> : null}\r\n\r\n                <Row>\r\n                    <Col style={{ padding: 0 }}><Button color='bg-primary' click={() => addHandler(this.state.orderDigit, this.state.orderCustomerName, false)} ><i className=\"fas fa-plus icon\"></i></Button></Col>\r\n                    <Col style={{ padding: 0 }}><Button color='bg-success' click={() => updateHandler(this.state.orderDigit)} ><i className=\"fas fa-check icon\"></i></Button></Col>\r\n                    <Col style={{ padding: 0 }}><Button color='bg-danger' click={() => deleteHandler(this.state.orderDigit)} ><i className=\"fas fa-trash icon\"></i></Button></Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nimport BranchOrder from '../BranchOrder/BranchOrder';\r\nimport BranchForm from '../BranchForm/BranchForm';\r\n\r\nimport './menu.css';\r\n// BOOTSTRAP IMPORTS\r\nimport Row from 'react-bootstrap/Row';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\n\r\nexport default class Menu extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            orders: [],\r\n            endpoint: \"http://localhost:8000\",\r\n            alert: null\r\n        };\r\n        this.updateHandler.bind(this);\r\n        this.deleteHandler.bind(this);\r\n        this.addHandler.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { endpoint } = this.state;\r\n        const socket = socketIOClient(endpoint);\r\n        this.setState({\r\n            socket: socket,\r\n        })\r\n        socket.on('orders', data => {\r\n            console.log(data);\r\n            this.setState({orders: data});\r\n        });\r\n    }\r\n\r\n    updateHandler = (digit) => {\r\n        fetch(this.state.endpoint + '/update-order/' + digit, {\r\n            method: 'PUT',\r\n        }).then(res => res.json()).then(resData => this.setState({alert: {alertContent: resData.response.content, isAlertPositive: resData.response.isPositive}})).catch(err => console.log(err));\r\n    }\r\n\r\n    deleteHandler = (digit) => {\r\n        fetch(this.state.endpoint + '/delete-order/' + digit, {\r\n            method: 'DELETE',\r\n        }).then(res => res.json()).then(resData => this.setState({alert: {alertContent: resData.response.content, isAlertPositive: resData.response.isPositive}})).catch(err => console.log(err));\r\n    }\r\n\r\n    addHandler = (digit, name, isReady) => {\r\n        if (digit) {\r\n            fetch(this.state.endpoint + '/add-order/', {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    orderDigit: digit,\r\n                    orderCustomerName: name,\r\n                    isOrderReady: isReady\r\n                }),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n\r\n            }).then(res => res.json()).then(resData => this.setState({ alert: { alertContent: resData.response.content, isAlertPositive: resData.response.isPositive }})).catch(err => console.log(err));\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\nrender() {\r\n    let orders = null;\r\n    if(this.state.orders) {\r\n        orders = this.state.orders.map(order => {\r\n            return <Col sm={6} md={3} lg={3}><BranchOrder orderData={order} updateHandler={this.updateHandler} deleteHandler={this.deleteHandler}></BranchOrder></Col>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='wrapper'>\r\n            <BranchForm endpoint={this.state.endpoint} addHandler={this.addHandler} updateHandler={this.updateHandler} deleteHandler={this.deleteHandler} alert={this.state.alert}></BranchForm>\r\n            <Container className='container-order'>\r\n                <Row className='row-order'>\r\n                    {orders}\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","    import App from './App';\nimport CustomerPage from './Components/CustomerPage/CustomerPage';\nimport BranchPage from './Components/BranchPage/BranchPage';\nimport BranchOrder from './Components/BranchOrder/BranchOrder';\nimport * as serviceWorker from './serviceWorker';\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n//import './index.css'\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nconst routing = (\n  <Router>\n    <div>\n      <Route exact path=\"/\" component={CustomerPage} />\n      <Route exact path=\"/branch\" component={BranchPage} />\n    </div>\n  </Router>\n)\nReactDOM.render(routing, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}